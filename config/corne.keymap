/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MO_TOG(layer) &mo_tog layer layer // macro to apply momentary on hold, toggle on tap
#define MO_SL(layer) &mo_sl layer layer // macro to apply momentary on hold sticky on tap

#define DEFAULT 0
#define LOWER 1
#define RAISE 2
// #define MISC 3

#define TD_TAPTERM 175
#define LAYER_TAPTERM 175
#define COMBO_TIMEOUT 32

#define QUICKTAP_MS 125
#define QUICKTAP_TERM 175

/ {
        // conditional_layers {
        //         compatible = "zmk,conditional-layers";
        //         tri_layer {
        //                 if-layers = <LOWER RAISE>;
        //                 then-layer = <MISC>;
        //         };
        // };
        
        macros {
                parens: parens {
                        label = "parens";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
                };
                braces: braces {
                        label = "braces";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp LBRC &kp RBRC &kp LEFT>;
                };
                brackets: brackets {
                        label = "brackets";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>;
                };
                prog_brackets: prog_brackets {
                        label = "prog_brackets";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>;
                };
                quotations: quotations {
                        label = "quotations";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp AT &kp AT &kp LEFT>;
                };
                apostrophes: apostrophes {
                        label = "apostrophes";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp APOS &kp APOS &kp LEFT>;
                };
                or: or {
                        label = "or";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp LS(NUBS) &kp LS(NUBS)>;
                };
                and: and {
                        label = "and";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp LS(N7) &kp LS(N7)>;
                };
                equals: equals {
                        label = "equals";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp EQUAL &kp EQUAL>;
                };
        };

        behaviors {
                mo_tog: behavior_mo_tog {
                        compatible = "zmk,behavior-hold-tap";
                        label = "mo_tog";
                        #binding-cells = <2>;
                        flavor = "hold-preferred";
                        tapping-term-ms = <LAYER_TAPTERM>;
                        bindings = <&mo>, <&tog>;
                };
                mo_sl: behavior_mo_sl {
                        compatible = "zmk,behavior-hold-tap";
                        label = "mo_sl";
                        #binding-cells = <2>;
                        flavor = "hold-preferred";
                        tapping-term-ms = <LAYER_TAPTERM>;
                        bindings = <&mo>, <&sl>;
                };
                td_lower: behavior_td_lower {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_lower";
                        #binding-cells = <0>;
                        tapping-term-ms = <LAYER_TAPTERM>;
                        bindings = <MO_SL(LOWER)>, <&tog LOWER>;
                };
                td_raise: behavior_td_raise {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_raise";
                        #binding-cells = <0>;
                        tapping-term-ms = <LAYER_TAPTERM>;
                        bindings = <MO_TOG(RAISE)>, <&tog RAISE>;
                };
                bksp_del: bksp_del {
                        compatible = "zmk,behavior-mod-morph";
                        label = "bksp_del";
                        #binding-cells = <0>;
                        bindings = <&kp BACKSPACE>, <&kp DELETE>;
                        mods = <(MOD_LCTL|MOD_RCTL|MOD_LSFT|MOD_RSFT)>;
                };
                skq: sticky_key_quick_release {
                        compatible = "zmk,behavior-sticky-key";
                        label = "STICKY_KEY_QUICK_RELEASE";
                        #binding-cells = <1>;
                        bindings = <&kp>;
                        release-after-ms = <1000>;
                        quick-release;
                };
                td_lsft: behavior_td_lsft {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_lsft";
                        #binding-cells = <0>;
                        tapping-term-ms = <TD_TAPTERM>;
                        bindings = <&skq LSFT>, <&caps_word>;
                };
                td_par: behavior_td_par {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_par";
                        #binding-cells = <0>;
                        tapping-term-ms = <TD_TAPTERM>;
                        bindings = <&mt RPAR LPAR>, <&parens>;
                };
                td_brc: behavior_td_brc {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_brc";
                        #binding-cells = <0>;
                        tapping-term-ms = <TD_TAPTERM>;
                        bindings = <&mt RBRC LBRC>, <&braces>;
                };
                gqt: global_quick_tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "gqt";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <QUICKTAP_TERM>;
                        quick-tap-ms = <QUICKTAP_MS>;
                        global-quick-tap;
                        bindings = <&kp>, <&kp>;
                };
                td_bkt: behavior_td_bkt {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_bkt";
                        #binding-cells = <0>;
                        tapping-term-ms = <TD_TAPTERM>;
                        bindings = <&mt RBKT LBKT>, <&brackets>;
                };
                td_excl_pipe: behavior_td_excl_pipe {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_excl_pipe";
                        #binding-cells = <0>;
                        tapping-term-ms = <TD_TAPTERM>;
                        bindings = <&gqt LS(NUBS) EXCL>, <&or>;
                };
                td_amps: behavior_td_amps {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_amps";
                        #binding-cells = <0>;
                        tapping-term-ms = <TD_TAPTERM>;
                        bindings = <&kp LS(N7)>, <&and>;
                };
                td_dqt: behavior_td_dqt {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_dqt";
                        #binding-cells = <0>;
                        tapping-term-ms = <TD_TAPTERM>;
                        bindings = <&kp AT>, <&quotations>;
                };
                td_apos: behavior_td_apos {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_apos";
                        #binding-cells = <0>;
                        tapping-term-ms = <TD_TAPTERM>;
                        bindings = <&kp APOS>, <&apostrophes>;
                };
                td_equals: behavior_td_equals {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_equals";
                        #binding-cells = <0>;
                        tapping-term-ms = <TD_TAPTERM>;
                        bindings = <&kp EQUAL>, <&equals>;
                };
        };

        combos{
                compatible = "zmk,combos";
                // left side
                combo_tab {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <13 14>;
                        bindings = <&kp TAB>;
                };
                combo_gresc {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <1 2>;
                        bindings = <&gresc>;
                };
                combo_lctrl {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <25 26>;
                        bindings = <&sk LCTRL>;
                };
                combo_lgui {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <26 27>;
                        bindings = <&sk LGUI>;
                };
                combo_lalt {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <27 28>;
                        bindings = <&sk LALT>;
                };
                //right side
                combo_backspace {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <9 10>;
                        bindings = <&bksp_del>;
                };
                combo_enter {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <21 22>;
                        bindings = <&kp ENTER>;
                };
                combo_rctrl {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <33 34>;
                        bindings = <&sk RCTRL>;
                };
                combo_rgui {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <32 33>;
                        bindings = <&sk RGUI>;
                };
                combo_ralt {
                        timeout-ms = <COMBO_TIMEOUT>;
                        key-positions = <31 32>;
                        bindings = <&sk RALT>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// ---------------------------------------------------------------------------------------
// | --- |  Q  |  W  |  F  |  P  |  B  |             |  J  |  L  |  U  |  Y  |  ;  | --- |
// | --- |  A  |  R  |  S  |  T  |  G  |             |  M  |  N  |  E  |  I  |  O  | --- |
// | --- |  Z  |  X  |  C  |  D  |  V  |             |  K  |  H  |  ,  |  .  |  /  | --- |
//                         | BSP | LWR | SHF | | SPC | RSE | ENT |
                        bindings = <
   &none  &kp Q &kp W    &kp F  &kp P     &kp B                             &kp J     &kp L     &kp U     &kp Y   &kp SEMI &none // 11
   &none  &kp A &kp R    &kp S  &kp T     &kp G                             &kp M     &kp N     &kp E     &kp I   &kp O    &none // 23
   &none  &kp Z &kp X    &kp C  &kp D     &kp V                             &kp K     &kp H     &kp COMMA &kp DOT &kp FSLH &none // 35
                                &bksp_del &td_lower &td_lsft /**/ &kp SPACE &td_raise &kp ENTER
                        >;
                };

                lower_layer {
// ---------------------------------------------------------------------------------------
// | --- |     |  &  | ()  | {}  |PLAY |             | +*  |  7  |  8  |  9  |  ^  | --- |
// | --- | !|  | ""  | -_  |  =  |  #  |             | ''  |  4  |  5  |  6  |  @  | --- |
// | --- |  \  | £$  |  %  | []  | RSE |             |  ;  |  1  |  2  |  3  |  ~  | --- |
//                         |-BSP-|-LWR-|-SHF-| |-SPC-|-RSE-|  0  |
bindings = <
   &none &gresc        &td_amps        &td_par          &td_brc    &kp C_PP                      &mt STAR PLUS &kp N7 &kp N8 &kp N9 &kp CARET    &none
   &none &td_excl_pipe &td_dqt         &gqt UNDER MINUS &td_equals &kp NUHS                      &td_apos      &kp N4 &kp N5 &kp N6 &kp DQT      &none
   &none &kp NUBS      &mt DLLR LS(N3) &kp LS(N5)       &td_bkt    &td_raise                     &kp SEMI      &kp N1 &kp N2 &kp N3 &kp LS(NUHS) &none
                                                        &trans     &tog LOWER &trans /**/ &trans &trans        &kp N0
                        >;
                };

                raise_layer {
// ---------------------------------------------------------------------------------------
// | --- | F1  | F2  | F3  | F4  |PLAY |             |VOL+ |HOME | UP  | END |PGUP | --- |
// | --- | F5  | F6  | F7  | F8  |     |             |VOL- |LEFT |DOWN |RIGHT|PGDN | --- |
// | --- | F9  | F10 | F11 | F12 |     |             | LWR |WDLFT|     |WDRT |     | --- |
//                         |-BSP-|-LWR-|-SHF-| |-SPC-|-RSE-|-ENT-|
                bindings = <
   &none &kp F1 &kp F2  &kp F3  &kp F4  &none                      &kp C_VOL_UP &kp HOME     &kp UP   &kp END       &kp PG_UP  &none
   &none &kp F5 &kp F6  &kp F7  &kp F8  &none                      &kp C_VOL_DN &kp LEFT     &kp DOWN &kp RIGHT     &kp PG_DN  &none
   &none &kp F9 &kp F10 &kp F11 &kp F12 &none                      &td_lower    &kp LC(LEFT) &none    &kp LC(RIGHT) &none      &none
                                &trans  &trans &trans /**/ &trans &tog RAISE   &kp RET
                        >;
                };

//                 misc_layer {
// // ---------------------------------------------------------------------------------------
// // | --- | PWR |     |     |     |     |             |BRT+ |     |     |     | LCK | --- |
// // | --- | BT0 | BT1 | BT2 | BT3 | BT4 |             |BRT- |BTCL |     |     |     | --- |
// // | --- |     |     |     |     |     |             |     |     |     |     |     | --- |
// //                         |-BSP-|-LWR-|-SHF-| |-SPC-|-RSE-|-ENT-|
//                         bindings = <
//    &none &none        &none        &none        &none        &none                         &kp C_BRI_UP &none &none &none &none &none
//    &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                  &kp C_BRI_DN &none &none &none &none &none
//    &none &bt BT_CLR   &none        &none        &none        &none                         &none        &none &none &none &none &none
//                                                 &none        &none        &none /**/ &none &none        &none
//                         >;
//                 };

        };
};