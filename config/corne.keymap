/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MO_TOG(layer) &mo_tog layer layer // macro to apply momentary on hold, toggle on tap
#define MO_SL(layer) &mo_sl layer layer // macro to apply momentary on hold sticky on tap
#define TD_MO_SL(layer) &td_mo_sl layer layer layer // macro to apply momentary on hold, sticky on tap, tog on double tap

#define DEFAULT 0
#define LOWER 1
#define LOWER_TOG 2
#define RAISE 3
#define RAISE_TOG 4



/ {
        behaviors {
                mo_tog: behavior_mo_tog {
                        compatible = "zmk,behavior-hold-tap";
                        label = "mo_tog";
                        #binding-cells = <2>;
                        flavor = "hold-preferred";
                        tapping-term-ms = <200>;
                        bindings = <&mo>, <&tog>;
                };
                mo_sl: behavior_mo_sl {
                        compatible = "zmk,behavior-hold-tap";
                        label = "mo_sl";
                        #binding-cells = <2>;
                        flavor = "hold-preferred";
                        tapping-term-ms = <200>;
                        bindings = <&mo>, <&sl>;
                };
                td_mo_tog: tap_dance_mo_tog {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_mo_tog";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mo_sl>, <&tog>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// --------------------------------------------------------------------------------
// | ---- |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  | ---- |
// | ---- |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  | ---- |
// | ---- |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | ---- |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &none  &kp Q &kp W    &kp F    &kp P        &kp B           &kp J   &kp L        &kp U     &kp Y   &kp SEMI    &none
   &none  &kp A &kp R    &kp S    &kp T        &kp G           &kp M   &kp N        &kp E     &kp I   &kp O       &none
   &none  &kp Z &kp X    &kp C    &kp D        &kp V           &kp K   &kp H        &kp COMMA &kp DOT &kp FSLH    &none
                         &kp LGUI MO_SL(LOWER) &kp SPACE       &kp RET MO_SL(RAISE) &kp RALT
                        >;
                };

                lower_layer {
// -------------------------------------------------------------------------------
// | ---- |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | ---- |
// | ---- | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     | ---- |
// | ---- |     |     |     |     |     |   |     |     |     |     |     | ---- |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp N1       &kp N2       &kp N3          &mt RBRC LBRC &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &none
   &none &kp TAB &bt BT_SEL 1 &mt MINUS UNDER &mt RPAR LPAR &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &none
   &none &trans       &trans       &trans          &mt RBKT LBKT &trans         &trans   &trans   &trans &trans    &trans &none
                                   &kp LGUI        &to LOWER_TOG        &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                lower_toggle_layer {
                        bindings = <
   &none &trans &trans &trans &trans      &trans     &trans &trans &trans &trans &trans &none
   &none &trans &trans &trans &trans      &trans     &trans &trans &trans &trans &trans &none
   &none &trans &trans &trans &trans      &trans     &trans &trans &trans &trans &trans &none
                       &trans &to DEFAULT &trans     &trans &trans &trans
                        >;
                };

                raise_layer {
// -------------------------------------------------------------------------------
// | ---- |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | ---- |
// | ---- |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  | ---- |
// | ---- |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" | ---- |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &none
   &none &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &none
   &none &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &none
                         &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};

