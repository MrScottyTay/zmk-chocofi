/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MO_TOG(layer) &mo_tog layer layer // macro to apply momentary on hold, toggle on tap
#define MO_SL(layer) &mo_sl layer layer // macro to apply momentary on hold sticky on tap
// #define TD_MO_SL(layer) &td_mo_sl layer layer // macro to apply momentary on hold, sticky on tap, tog on double tap
#define TD_SL_TOG(layer) &td_sl_tog layer layer // macro to apply toggle on tap, toggle on double tap

#define DEFAULT 0
#define LOWER 1
// #define LOWER_TOG 2
#define RAISE 2
// #define RAISE_TOG 4



/ {
        macros {
                parens: parens {
                        label = "parens";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>;
                };
                braces: braces {
                        label = "braces";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp LBRC &kp RBRC &kp LEFT>;
                };
                brackets: brackets {
                        label = "brackets";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>;
                };
                quotations: quotations {
                        label = "quotations";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
                };
                apostrophes: apostrophes {
                        label = "apostrophes";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp APOSTROPHE &kp APOSTROPHE &kp LEFT>;
                };
                or: or {
                        label = "or";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp PIPE &kp PIPE>;
                };
                and: and {
                        label = "pipes";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings = <&macro_tap &kp AMPS &kp AMPS>;
                };
        };

        behaviors {
                mo_tog: behavior_mo_tog {
                        compatible = "zmk,behavior-hold-tap";
                        label = "mo_tog";
                        #binding-cells = <2>;
                        flavor = "hold-preferred";
                        tapping-term-ms = <200>;
                        bindings = <&mo>, <&tog>;
                };
                mo_sl: behavior_mo_sl {
                        compatible = "zmk,behavior-hold-tap";
                        label = "mo_sl";
                        #binding-cells = <2>;
                        flavor = "hold-preferred";
                        tapping-term-ms = <200>;
                        bindings = <&mo>, <&sl>;
                };
                td_lower: behavior_td_lower {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_lower";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mo_sl LOWER LOWER>, <&tog LOWER>;
                };
                td_raise: behavior_td_raise {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_lower";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mo_sl RAISE RAISE>, <&tog RAISE>;
                };
                backspace_delete: backspace_delete {
                        compatible = "zmk,behavior-mod-morph";
                        label = "BACKSPACE_DELETE";
                        #binding-cells = <0>;
                        bindings = <&kp BACKSPACE>, <&kp DELETE>;
                        mods = <(MOD_LCTL|MOD_RCTL|MOD_LSFT|MOD_RSFT)>;
                };
                skq: sticky_key_quick_release {
                        compatible = "zmk,behavior-sticky-key";
                        label = "STICKY_KEY_QUICK_RELEASE";
                        #binding-cells = <1>;
                        bindings = <&kp>;
                        release-after-ms = <1000>;
                        quick-release;
                };
                td_par: behavior_td_par {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_par";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mt RPAR LPAR>, <&parens>;
                };
                td_brc: behavior_td_brc {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_brc";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mt RBRC LBRC>, <&braces>;
                };
                td_bkt: behavior_td_bkt {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_bkt";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mt RBKT LBKT>, <&brackets>;
                };
                mt_quote: global-quick-tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "mt_quote";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <200>;
                        quick-tap-ms = <125>;
                        global-quick-tap;
                        bindings = <&quotations>, <&DOUBLE_QUOTES>;
                };
                mt_apos: global-quick-tap {
                        compatible = "zmk,behavior-hold-tap";
                        label = "mt_apos";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <200>;
                        quick-tap-ms = <125>;
                        global-quick-tap;
                        bindings = <&apostrophes>, <&APOSTROPHE>;
                };
                td_excl_pipe: behavior_td_excl_pipe {
                        compatible = "zmk,behavior-tap-dance";
                        label = "td_excl_pipe";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mt PIPE EXCL>, <&or>;
                };
        };

        combos{
                compatible = "zmk,combos";
                // left side
                combo_tab {
                        timeout-ms = <30>;
                        key-positions = <13 14>;
                        bindings = <&kp TAB>;
                };
                combo_gresc {
                        timeout-ms = <30>;
                        key-positions = <1 2>;
                        bindings = <&kp gresc>;
                };
                combo_lctrl {
                        timeout-ms = <30>;
                        key-positions = <25 26>;
                        bindings = <&sk LCTRL>;
                };
                combo_lgui {
                        timeout-ms = <30>;
                        key-positions = <26 27>;
                        bindings = <&sk LGUI>;
                };
                combo_lalt {
                        timeout-ms = <30>;
                        key-positions = <27 28>;
                        bindings = <&sk LALT>;
                };
                //right side
                combo_backspace {
                        timeout-ms = <30>;
                        key-positions = <9 10>;
                        bindings = <&kp backspace_delete>;
                };
                combo_enter {
                        timeout-ms = <30>;
                        key-positions = <21 22>;
                        bindings = <&kp ENTER>;
                };
                combo_rctrl {
                        timeout-ms = <30>;
                        key-positions = <33 34>;
                        bindings = <&sk RCTRL>;
                };
                combo_rgui {
                        timeout-ms = <30>;
                        key-positions = <32 33>;
                        bindings = <&sk RGUI>;
                };
                combo_ralt {
                        timeout-ms = <30>;
                        key-positions = <31 32>;
                        bindings = <&sk RALT>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// ------------------------------------------------------------------------------------------
// | ---- |  Q  |  W  |  F  |  P  |  B  |             |  J  |  L   |  U  |  Y  |  ;  | ---- |
// | ---- |  A  |  R  |  S  |  T  |  G  |             |  M  |  N   |  E  |  I  |  O  | ---- |
// | ---- |  Z  |  X  |  C  |  D  |  V  |             |  K  |  H   |  ,  |  .  |  /  | ---- |
//                          | BSP | LWR | SHF | | SPC | RSE  | ENT |
                        bindings = <
   &none  &kp Q &kp W    &kp F  &kp P         &kp B                                &kp J     &kp L     &kp U     &kp Y   &kp SEMI &none // 11
   &none  &kp A &kp R    &kp S  &kp T         &kp G                                &kp M     &kp N     &kp E     &kp I   &kp O    &none // 23
   &none  &kp Z &kp X    &kp C  &kp D         &kp V                                &kp K     &kp H     &kp COMMA &kp DOT &kp FSLH &none // 35
                                &kp BACKSPACE &td_lower &skq LSHIFT /**/ &kp SPACE &mo RAISE &kp ENTER
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------
// | ---- |     |     | ()  | {}  |     |             | +*  |  7  |  8  |  9  |     | ---- |
// | ---- |     | ""  | -_  |  =  |     |             | ''  |  4  |  5  |  6  |     | ---- |
// | ---- |     |     |     | []  |     |             |  ;  |  1  |  2  |  3  |     | ---- |
//                          |     |-LWR-|     | | ENT | RSE |  0  |
                        bindings = <
   &none &trans        &kp AMPS        &td_par         &td_brc   &trans                            &mt PLUS STAR &kp N7 &kp N8 &kp N9 &trans &none
   &none &td_excl_pipe &mt_quote       &mt UNDER MINUS &kp EQUAL &trans                            &mt_apos      &kp N4 &kp N5 &kp N6 &trans &none
   &none &kp BLSH      &mt DLLR LS(N3) &trans          &td_bkt  &trans                            &kp SEMI      &kp N1 &kp N2 &kp N3 &trans &none
                                                       &trans    &tog LOWER &kp SPACE /**/ &kp RET &trans        &kp N0
                        >;
                };

//                 lower_toggle_layer {
//                         bindings = <
//    &none &trans &trans &trans &trans      &trans     &trans &trans &trans &trans &trans &none
//    &none &trans &trans &trans &trans      &trans     &trans &trans &trans &trans &trans &none
//    &none &trans &trans &trans &trans      &trans     &trans &trans &trans &trans &trans &none
//                        &trans &to DEFAULT &trans     &trans &trans &trans
//                         >;
//                 };

                raise_layer {
// -------------------------------------------------------------------------------
// | ---- |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | ---- |
// | ---- |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  | ---- |
// | ---- |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" | ---- |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &none
   &none &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &none
   &none &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &none
                         &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};

